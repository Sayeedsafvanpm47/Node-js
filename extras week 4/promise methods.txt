ertainly! Both Promise.all and Promise.race are powerful methods for working with multiple promises in Node.js. Here are examples for both:
Promise.all

Promise.all is used when you have an array of promises, and you want to wait for all of them to resolve successfully. It returns a new promise that resolves with an array of results when all the promises in the input array have resolved, or it rejects if any of the promises reject.

javascript

const axios = require('axios');

const urls = [
  'https://api.example.com/data1',
  'https://api.example.com/data2',
  'https://api.example.com/data3',
];

const promises = urls.map(url => axios.get(url)); // Assuming axios is installed

Promise.all(promises)
  .then(results => {
    // 'results' is an array containing the resolved values of all promises
    console.log('All promises resolved:', results);
  })
  .catch(error => {
    // If any of the promises reject, this block will be executed
    console.error('At least one promise rejected:', error);
  });

In this example, Promise.all is used to make multiple HTTP requests in parallel and wait for all of them to complete. Once all the promises have resolved, you can access the results in the results array.
Promise.race

Promise.race is used when you have an array of promises, and you want to race them, resolving or rejecting as soon as the first promise in the array resolves or rejects.

javascript

const axios = require('axios');

const timeoutPromise = new Promise((resolve, reject) => {
  setTimeout(() => {
    reject(new Error('Timeout'));
  }, 3000); // Timeout after 3 seconds
});

const fetchDataPromise = axios.get('https://api.example.com/data'); // Assuming axios is installed

Promise.race([fetchDataPromise, timeoutPromise])
  .then(result => {
    console.log('The first promise to resolve:', result);
  })
  .catch(error => {
    console.error('The first promise to reject:', error);
  });

In this example, Promise.race is used to race between fetching data from an API and a timeout promise. If the API request resolves within 3 seconds, it will log the result. If the timeout promise wins the race (i.e., the API request takes more than 3 seconds), it will log a timeout error.

These examples illustrate how Promise.all and Promise.race can be used to handle multiple promises concurrently and make your code more efficient when dealing with asynchronous tasks in Node.js.


Promise.allSettled

Promise.allSettled is used when you want to wait for all promises to settle (either resolve or reject) without stopping if one of them rejects. It returns a promise that resolves to an array of objects representing the outcome of each promise, including its status and value (if resolved) or reason (if rejected).

javascript

const promises = [
  Promise.resolve('Resolved 1'),
  Promise.reject('Rejected 2'),
  Promise.resolve('Resolved 3'),
];

Promise.allSettled(promises)
  .then(results => {
    console.log('All promises settled:', results);
  })
  .catch(error => {
    console.error('Error:', error);
  });

In this example, Promise.allSettled is used to handle an array of promises, including one that resolves and two that reject. The results array will contain objects with the status ('fulfilled' or 'rejected') and the value or reason.
Promise.any

Promise.any is used when you want to race between promises and resolve as soon as one of them resolves. It returns a promise that resolves with the value of the first resolved promise, or it rejects if all promises reject.

javascript

const promises = [
  Promise.reject('Rejected 1'),
  Promise.resolve('Resolved 2'),
  Promise.reject('Rejected 3'),
];

Promise.any(promises)
  .then(result => {
    console.log('The first promise to resolve:', result);
  })
  .catch(errors => {
    console.error('All promises rejected:', errors);
  });

In this example, Promise.any is used to race between promises. It will resolve with the value of the first resolved promise ('Resolved 2' in this case) or reject with an array of rejection reasons if all promises reject.